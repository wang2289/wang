//index.js
//获取应用实例

const app = getApp()
const WXApi = require('../../wxapi/main')
import {
  Config
} from '../../utils/config';
import {
  Token
} from '../../utils/token.js'
import { requestsend, requestsendtoken } from '../../utils/util.js'
import Toast from 'vant-weapp/toast/toast';
Page({
  data: {
    show: false,
    userInfo: {},
    hasUserInfo: false,
    canIUse: wx.canIUse('button.open-type.getUserInfo'),
    tabsindex: 1,
    active: 0,
    myshipinglist: [],
    lastlooklist: [],
    questionbanklist: [],
    lastquestionbanklist: [],
    errorlist: [],
    lasterrorlist: [],
    marklist: [],
    lastmarklist: [], 
  },
  //事件处理函数
  bindViewTap: function() {
    wx.navigateTo({
      url: '../logs/logs'
    })
  },
  goToHome: function(){
    wx.reLaunch({
      url: '../home/home'
    })
  },
  onLoad: function (options) {
    Toast.loading({
      mask: true,
      message: '加载中...',
      duration: 0
    });
    this.setData({
      active: wx.getStorageSync("active")
    })
    if (app.globalData.userInfo) {
      this.setData({
        userInfo: app.globalData.userInfo,
        hasUserInfo: true
      })
    } else if (this.data.canIUse){
      // 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回
      // 所以此处加入 callback 以防止这种情况
      app.userInfoReadyCallback = res => {
        this.setData({
          userInfo: res.userInfo,
          hasUserInfo: true
        })
      }
    } else {
      // 在没有 open-type=getUserInfo 版本的兼容处理
      wx.getUserInfo({
        success: res => {
          app.globalData.userInfo = res.userInfo
          this.setData({
            userInfo: res.userInfo,
            hasUserInfo: true
          })
        }
      })
    }
  },
  onShow: function(){
    Toast.loading({
      mask: false,
      message: '加载中...',
      duration: 0
    });
    this.setData({
      active: wx.getStorageSync("active")
    })
    var token = wx.getStorageSync("token")
    //var token = "123"
    if (token == '') {
      this.setData({
        show: true, //临时修改
      })
    } else {
      this.setData({
        show: false,
      })
      this.getMyCourseList()
    }


  },
  getUserInfo: function(e) {
    console.log(e)
    app.globalData.userInfo = e.detail.userInfo
    this.setData({
      userInfo: e.detail.userInfo,
      hasUserInfo: true
    })
  },
  changequesbank: function(){
    this.setData({
      tabsindex: 1
    })
  },
  changeerrbook: function(){
    this.setData({
      tabsindex: 2
    })
  },
  markbook: function(){
    this.setData({
      tabsindex: 3
    })
  },
  onChange(event) {
    // wx.showToast({
    //   title: `切换到标签 ${event.detail.index}`,
    //   icon: 'none'
    // });
  },
  gotologin: function () {
    wx.navigateTo({
      url: '/pages/register/register?returnurl=returnurl'
    })
  },
  //获取我的课程列表
  getMyCourseList: function(){
    var params = {}
    requestsendtoken('api/QX/GetMyShiPingAndTiKu', 'GET', params,this.getMyShiPingListAjax)
  },
  getMyShiPingListAjax: function(res){
    if(res.code == 0){
      Toast.clear()
      this.setData({
        myshipinglist: res.data.kecheng.mykecheng,
        lastlooklist: res.data.kecheng.lastlook,
        questionbanklist: res.data.tiku.mytiku.items,
        lastquestionbanklist: res.data.tiku.mytiku.lasttiku,
        errorlist: res.data.tiku.ctb.items,
        lasterrorlist: res.data.tiku.ctb.lastctb,
        marklist: res.data.tiku.bjt.items,
        lastmarklist: res.data.tiku.bjt.lastbjt
      })
    } else{
      Toast.fail("服务器异常")
    }
  },
  //课程详情页
  gotoCourseDetail: function(e){
    var aomid = e.currentTarget.dataset.aomid
    var sortid = e.currentTarget.dataset.aomid
    console.log(aomid)
  },
  //跳转题库详情页
  gotoQuestionBankDetail: function(e){
    var aomid = e.currentTarget.dataset.aomid
    var sortid = e.currentTarget.dataset.sortid
    wx.navigateTo({
      url: '/pages/tidetail/tidetail?isbuy=true&aomid=' + aomid + '&sortid=' + sortid,
    })
  }
})
